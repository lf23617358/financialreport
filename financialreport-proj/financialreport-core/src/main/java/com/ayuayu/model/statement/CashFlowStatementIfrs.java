/*
 * Created on 28 五月 2016 ( Time 15:18:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key

package com.ayuayu.model.statement;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * Persistent class for entity stored in table "CASHFLOW_STATEMENT_IFRS"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name = "CASH_FLOW_STATEMENT_IFRS")
// Define named queries here
@NamedQueries({ @NamedQuery(name = "CashFlowStatementIfrs.countAll", query = "SELECT COUNT(x) FROM CashFlowStatementIfrs x") })
public class CashFlowStatementIfrs implements Serializable {

	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------
	// ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )
	// ----------------------------------------------------------------------
	@EmbeddedId
	private CashFlowStatementIfrsKey compositePrimaryKey;

	// ----------------------------------------------------------------------
	// ENTITY DATA FIELDS
	// ----------------------------------------------------------------------
	@Column(name = "CASH_FLOWS_FROM_USED_IN_OPERATING_ACTIVITIES")
	private Long cashFlowsFromUsedInOperatingActivities;

	@Column(name = "INTEREST_EXPENSE")
	private Long interestExpense;

	@Column(name = "NET_CASH_FLOWS_FROM_USED_IN_INVESTING_ACTIVITIES")
	private Long netCashFlowsFromUsedInInvestingActivities;

	@Column(name = "ACQUISITION_OF_PROPERTY_PLANT_AND_EQUIPMENT")
	private Long acquisitionOfPropertyPlantAndEquipment;

	@Column(name = "DECREASE_INCREASE_IN_INVENTORIES")
	private Long decreaseIncreaseInInventories;

	@Column(name = "CASH_FLOWS_FROM_USED_IN_FINANCING_ACTIVITIES")
	private Long cashFlowsFromUsedInFinancingActivities;

	@Column(name = "CASH_DIVIDENDS_PAID")
	private Long cashDividendsPaid;

	@Column(name = "DEPRECIATION_EXPENSE")
	private Long depreciationExpense;

	@Column(name = "AMORTIZATION_EXPENSE")
	private Long amortizationExpense;

	// ----------------------------------------------------------------------
	// ENTITY LINKS ( RELATIONSHIP )
	// ----------------------------------------------------------------------

	// ----------------------------------------------------------------------
	// CONSTRUCTOR(S)
	// ----------------------------------------------------------------------
	public CashFlowStatementIfrs() {
		super();
		this.compositePrimaryKey = new CashFlowStatementIfrsKey();
	}

	// ----------------------------------------------------------------------
	// GETTER & SETTER FOR THE COMPOSITE KEY
	// ----------------------------------------------------------------------
	public void setStockId(String stockId) {
		this.compositePrimaryKey.setStockId(stockId);
	}

	public String getStockId() {
		return this.compositePrimaryKey.getStockId();
	}

	public void setYear(Short year) {
		this.compositePrimaryKey.setYear(year);
	}

	public Short getYear() {
		return this.compositePrimaryKey.getYear();
	}

	public void setSeason(Byte season) {
		this.compositePrimaryKey.setSeason(season);
	}

	public Byte getSeason() {
		return this.compositePrimaryKey.getSeason();
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR FIELDS
	// ----------------------------------------------------------------------
	// --- DATABASE MAPPING : CASH_FLOWS_FROM_USED_IN_OPERATING_ACTIVITIES (
	// BIGINT )
	public void setCashFlowsFromUsedInOperatingActivities(
			Long cashFlowsFromUsedInOperatingActivities) {
		this.cashFlowsFromUsedInOperatingActivities = cashFlowsFromUsedInOperatingActivities;
	}

	public Long getCashFlowsFromUsedInOperatingActivities() {
		return this.cashFlowsFromUsedInOperatingActivities;
	}

	// --- DATABASE MAPPING : INTEREST_EXPENSE ( BIGINT )
	public void setInterestExpense(Long interestExpense) {
		this.interestExpense = interestExpense;
	}

	public Long getInterestExpense() {
		return this.interestExpense;
	}

	// --- DATABASE MAPPING : NET_CASH_FLOWS_FROM_USED_IN_INVESTING_ACTIVITIES (
	// BIGINT )
	public void setNetCashFlowsFromUsedInInvestingActivities(
			Long netCashFlowsFromUsedInInvestingActivities) {
		this.netCashFlowsFromUsedInInvestingActivities = netCashFlowsFromUsedInInvestingActivities;
	}

	public Long getNetCashFlowsFromUsedInInvestingActivities() {
		return this.netCashFlowsFromUsedInInvestingActivities;
	}

	// --- DATABASE MAPPING : ACQUISITION_OF_PROPERTY_PLANT_AND_EQUIPMENT (
	// BIGINT )
	public void setAcquisitionOfPropertyPlantAndEquipment(
			Long acquisitionOfPropertyPlantAndEquipment) {
		this.acquisitionOfPropertyPlantAndEquipment = acquisitionOfPropertyPlantAndEquipment;
	}

	public Long getAcquisitionOfPropertyPlantAndEquipment() {
		return this.acquisitionOfPropertyPlantAndEquipment;
	}

	// --- DATABASE MAPPING : DECREASE_INCREASE_IN_INVENTORIES ( BIGINT )
	public void setDecreaseIncreaseInInventories(
			Long decreaseIncreaseInInventories) {
		this.decreaseIncreaseInInventories = decreaseIncreaseInInventories;
	}

	public Long getDecreaseIncreaseInInventories() {
		return this.decreaseIncreaseInInventories;
	}

	// --- DATABASE MAPPING : CASH_FLOWS_FROM_USED_IN_FINANCING_ACTIVITIES (
	// BIGINT )
	public void setCashFlowsFromUsedInFinancingActivities(
			Long cashFlowsFromUsedInFinancingActivities) {
		this.cashFlowsFromUsedInFinancingActivities = cashFlowsFromUsedInFinancingActivities;
	}

	public Long getCashFlowsFromUsedInFinancingActivities() {
		return this.cashFlowsFromUsedInFinancingActivities;
	}

	// --- DATABASE MAPPING : CASH_DIVIDENDS_PAID ( BIGINT )
	public void setCashDividendsPaid(Long cashDividendsPaid) {
		this.cashDividendsPaid = cashDividendsPaid;
	}

	public Long getCashDividendsPaid() {
		return this.cashDividendsPaid;
	}

	// --- DATABASE MAPPING : DEPRECIATION_EXPENSE ( BIGINT )
	public void setDepreciationExpense(Long depreciationExpense) {
		this.depreciationExpense = depreciationExpense;
	}

	public Long getDepreciationExpense() {
		return this.depreciationExpense;
	}

	// --- DATABASE MAPPING : AMORTIZATION_EXPENSE ( BIGINT )
	public void setAmortizationExpense(Long amortizationExpense) {
		this.amortizationExpense = amortizationExpense;
	}

	public Long getAmortizationExpense() {
		return this.amortizationExpense;
	}

	// ----------------------------------------------------------------------
	// GETTERS & SETTERS FOR LINKS
	// ----------------------------------------------------------------------

	// ----------------------------------------------------------------------
	// toString METHOD
	// ----------------------------------------------------------------------
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		if (compositePrimaryKey != null) {
			sb.append(compositePrimaryKey.toString());
		} else {
			sb.append("(null-key)");
		}
		sb.append("]:");
		sb.append(cashFlowsFromUsedInOperatingActivities);
		sb.append("|");
		sb.append(interestExpense);
		sb.append("|");
		sb.append(netCashFlowsFromUsedInInvestingActivities);
		sb.append("|");
		sb.append(acquisitionOfPropertyPlantAndEquipment);
		sb.append("|");
		sb.append(decreaseIncreaseInInventories);
		sb.append("|");
		sb.append(cashFlowsFromUsedInFinancingActivities);
		sb.append("|");
		sb.append(cashDividendsPaid);
		sb.append("|");
		sb.append(depreciationExpense);
		sb.append("|");
		sb.append(amortizationExpense);
		return sb.toString();
	}

}
